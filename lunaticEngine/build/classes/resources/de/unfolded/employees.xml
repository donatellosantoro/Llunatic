<?xml version="1.0" encoding="UTF-8"?>
<scenario>
  <source>
    <type>GENERATE</type>
    <generate>
<![CDATA[
SCHEMA:
SourceEmp(id, name, dept, rating)
SourceDept(name, manager)
INSTANCE:
SourceEmp(id: "1", name: "John", dept: "Marketing", rating: "5")
SourceEmp(id: "2", name: "Luke", dept: "Shipping", rating: "7")
SourceEmp(id: "3", name: "Mike", dept: "Shipping", rating: "2")
SourceDept(name: "Marketing", manager: "1")
SourceDept(name: "Shipping" , manager: "2")
]]>
    </generate>
  </source>
  <target>
    <type>GENERATE</type>
    <generate>
<![CDATA[
SCHEMA:
Worker(id, name)
Promoted(id)
LazyWorker(id, name)
HardWorker(id, name)
Department(name)
WorksIn(id, dept)
HasManager(dept, mgr)
]]>
    </generate>
  </target>
  <dependencies>
<![CDATA[
STTGDs:
SourceEmp(id: $id, name: $name, dept: $dept, rating: $rating), $rating < 5 -> LazyWorker(id: $id, name: $name).
SourceEmp(id: $id, name: $name, dept: $dept, rating: $rating), $rating < 5 -> Worker(id: $id, name: $name).
SourceEmp(id: $id, name: $name, dept: $dept, rating: $rating), $rating < 5 -> WorksIn(id: $id, dept: $dept).
SourceEmp(id: $id, name: $name, dept: $dept, rating: $rating), $rating < 5 -> Department(name: $dept).
SourceEmp(id: $id, name: $name, dept: $dept, rating: $rating), $rating >= 5 -> HardWorker(id: $id, name: $name).
SourceEmp(id: $id, name: $name, dept: $dept, rating: $rating), $rating >= 5 -> Worker(id: $id, name: $name).
SourceEmp(id: $id, name: $name, dept: $dept, rating: $rating), $rating >= 5 -> WorksIn(id: $id, dept: $dept).
SourceEmp(id: $id, name: $name, dept: $dept, rating: $rating), $rating >= 5 -> Department(name: $dept).
SourceDept(name: $name, manager: $manager) -> Department(name: $name).
SourceDept(name: $name, manager: $manager) -> HasManager(dept: $name, mgr: $manager).
SourceDept(name: $name, manager: $manager) -> HardWorker(id: $manager, name: $N), Worker(id: $manager, name: $N).

EGDs:
Worker(id: $id, name: $name1), Worker(id: $id, name: $name2) -> $name1 == $name2.
HasManager(dept: $name, mgr: $manager1), HasManager(dept: $name, mgr: $manager2) -> $manager1 == $manager2.

//Views:
//Worker(id: $id, name: $name) :- Employee(id: $id, name: $name, dept: $N).
//Promoted(id: $id) :- HasPassedTest(emp: $id, testcode: $N1) and not exists(DisciplinaryProcedure(pnum: $N2, emp: $id)).
//LazyWorker(id: $id, name: $name) :- Employee(id: $id, name: $name, dept: $N) and not exists(Promoted(id: $id)).
//HardWorker(id: $id, name: $name) :- Employee(id: $id, name: $name, dept: $N) and not exists(LazyWorker(id: $id, name: $name)).
//Department(name: $name) :- Dept(name: $name).
//WorksIn(id: $id, dept: $dept) :- Employee(id: $id, name: $N, dept: $dept).
//HasManager(dept: $dept, mgr: $mgr) :- Manager(mgr: $mgr, dept: $dept).
]]>
  </dependencies>
  <partialOrder/>
</scenario>

