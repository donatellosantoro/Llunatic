<?xml version="1.0" encoding="UTF-8"?>
<scenario>
   <source>
    <type>DBMS</type>
    <access-configuration>
      <driver>org.postgresql.Driver</driver>
      <uri>jdbc:postgresql:treatments</uri>
      <schema>source</schema>
      <login>pguser</login>
      <password>pguser</password>
    </access-configuration>
    <init-db>
<![CDATA[
create schema source;
SET search_path = source, pg_catalog;

create table consttablecf1 (
  oid serial,
  insurance varchar(50),
  treatment varchar(50)
);

create table consttablecf2 (
  oid serial,
  insurance varchar(50),
  city varchar(50)
);

create table masterdata (
  oid serial,
  ssn varchar(50),
  name varchar(50),
  phone varchar(50),
  str varchar(50),
  city varchar(50)
);

insert into consttablecf1 values (1, 'Abx', 'Dental');
insert into consttablecf2 values (2, 'Abx', 'SF');
insert into consttablecf2 values (3, 'Cis', 'NYC');
insert into masterdata values(4, '222', 'F. Lennon',  '122-1876', 'Sky Dr.', 'SF');
insert into masterdata values(5, '111', 'M. White',  '408-3334', 'Red Ave.', 'LA');
]]>
  </init-db>
  </source>
   <target>
    <type>DBMS</type>
    <access-configuration>
      <driver>org.postgresql.Driver</driver>
      <uri>jdbc:postgresql:treatments</uri>
      <schema>target</schema>
      <login>pguser</login>
      <password>pguser</password>
    </access-configuration>
    <init-db>
<![CDATA[
create schema target;
SET search_path = target, pg_catalog;

create table customers (
  oid serial,
  ssn varchar(50),
  name varchar(50),
  phone varchar(50),
  cfphone varchar(50),
  str varchar(50),
  city varchar(50),
  cc varchar(50)
);

create table treatments (
  oid serial,
  ssn varchar(50),
  salary varchar(50),
  insurance varchar(50),
  treatment varchar(50),
  date varchar(50)
);


insert into customers values (3, '111', 'M. White',  '408-3334', '8', 'Red Ave.', 'NYC', '112-321');
insert into customers values (4, '222', 'L. Lennon', '122-1876', '9', null, 'SF', '781-658');
insert into customers values (5, '222', 'L. Lennon', '000-0000', '0', 'Fry Dr.',  'SF', '784-659');
insert into treatments values (6, '111', '10K', 'Abx', 'Dental',     '2011-01-10');
insert into treatments values (7, '111', '25K', 'Abx', 'Cholest.',   '2012-12-08');
insert into treatments values (8, '111', '25K', 'Cis', 'Cholest.',   '2012-12-10');
insert into treatments values (9, '222', '25K', 'Cis', 'Cholest.',   '2012-10-09');
insert into treatments values (10, '222', '30K', 'Abx', 'Eye surg.', '2012-10-06');
]]>
    </init-db>
  </target>
  <dependencies>
<![CDATA[
ExtEGDs:
//MasterData: CUST[SSN,PHONE],MD[SSN,PHONE] -> NAME,STREET,CITY
md1: customers( ssn: $ssn, name: $name1, phone: $phone, cfphone: $cfphone1, str: $str1, city: $city1, cc: $cc1),
masterdata(ssn: $ssn, name: $name2, phone: $phone, str: $str2, city: $city2) 
    -> $name1 == $name2.
md2: customers( ssn: $ssn, name: $name1, phone: $phone, cfphone: $cfphone1, str: $str1, city: $city1, cc: $cc1),
masterdata(ssn: $ssn, name: $name2, phone: $phone, str: $str2, city: $city2) 
    -> $str1 == $str2.
md3: customers( ssn: $ssn, name: $name1, phone: $phone, cfphone: $cfphone1, str: $str1, city: $city1, cc: $cc1),
masterdata(ssn: $ssn, name: $name2, phone: $phone, str: $str2, city: $city2) 
    -> $city1 == $city2.

//CFD: INSUR[Abx] -> TREAT[Dental]
cfd1: treatments(ssn: $ssn1, salary: $salary1, insurance: $insur, treatment: $treat1, date: $date1),
consttablecf1(insurance: $insur, treatment: $treat2)
    -> $treat1 == $treat2.

//CFD: CUST[SSN],INSUR[Abx] -> CITY[Sf]
cfd2: treatments(ssn: $ssn, salary: $salary1, insurance: $insurance, treatment: $treatment1, date: $date1),
       customers(ssn: $ssn, name: $name1,  phone: $phone1, cfphone: $cfphone1, str: $str1, city: $city1, cc: $cc1),
consttablecf2(insurance: $insurance, city: $city2)
    -> $city1 == $city2.

//FD: SSN,NAME -> PHONE 
fd1: customers(ssn: $ssn, name: $name,  phone: $phone1, cfphone: $cfphone1, str: $str1, city: $city1, cc: $cc1),
customers(ssn: $ssn, name: $name,  phone: $phone2, cfphone: $cfphone2, str: $str2, city: $city2, cc: $cc2) 
    -> $phone1 == $phone2.

//FD: SSN,NAME -> CC 
fd3: customers(ssn: $ssn, name: $name,  phone: $phone1, cfphone: $cfphone1, str: $str1, city: $city1, cc: $cc1),
customers(ssn: $ssn, name: $name,  phone: $phone2, cfphone: $cfphone2, str: $str2, city: $city2, cc: $cc2) 
    -> $cc1 == $cc2.

//Currency
//FD: SSN -> SALARY 
fd2: treatments(ssn: $ssn, salary: $salary1, insurance: $insur1, treatment: $treat1, date: $date1),
    treatments(ssn: $ssn, salary: $salary2, insurance: $insur2, treatment: $treat2, date: $date2)
    -> $salary1 == $salary2.
]]>
  </dependencies>
  <orderingAttributes>
    <orderingAttribute>
      <attribute>customers.phone</attribute>
      <associatedAttribute>customers.cfphone</associatedAttribute>
      <valueComparator sort="DESC">
        <floatComparator/>
      </valueComparator>
    </orderingAttribute>    
    <orderingAttribute>
      <attribute>treatments.salary</attribute>
      <associatedAttribute>treatments.date</associatedAttribute>
      <valueComparator sort="DESC">
        <dateComparator pattern="yyyy-MM-dd"/>
      </valueComparator>
    </orderingAttribute>
  </orderingAttributes>
 <costManager>
    <type>Similarity</type>
    <similarityStrategy>Mixed</similarityStrategy>
    <similarityThreshold>0.60</similarityThreshold>
    <leavesThreshold>5</leavesThreshold>
    <potentialSolutionsThreshold>5</potentialSolutionsThreshold>
  </costManager>
  <partialOrder>
    <type>Frequency</type>
  </partialOrder>
  <configuration/>
</scenario>

