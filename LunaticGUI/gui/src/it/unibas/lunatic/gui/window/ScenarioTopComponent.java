package it.unibas.lunatic.gui.window;

import it.unibas.lunatic.gui.ExplorerTopComponent;
import it.unibas.lunatic.gui.R;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.nodes.Node;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//it.unibas.lunatic.gui//Scenario//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = R.Window.SCENARIO,
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "project", openAtStartup = true)
@ActionID(category = "Window", id = "it.unibas.lunatic.gui.ScenarioTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ScenarioAction",
        preferredID = R.Window.SCENARIO)
@Messages({
    "CTL_ScenarioAction=Scenario",
    "CTL_ScenarioTopComponent=Scenario",
    "HINT_ScenarioTopComponent=This is a Scenario window"
})
public final class ScenarioTopComponent extends ExplorerTopComponent {

//    private PropertySheet propertySheet = new PropertySheet();

    public ScenarioTopComponent() {
        initComponents();
        setName(Bundle.CTL_ScenarioTopComponent());
        setToolTipText(Bundle.HINT_ScenarioTopComponent());
        putClientProperty(TopComponent.PROP_KEEP_PREFERRED_SIZE_WHEN_SLIDED_IN, Boolean.TRUE);
        associateExplorerLookup();
//        splitPane.setBottomComponent(propertySheet);
//        propertySheet.setDescriptionAreaVisible(false);
        removeRootContext();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        splitPane = new javax.swing.JSplitPane();
        treeView = new org.openide.explorer.view.BeanTreeView();

        splitPane.setDividerSize(7);
        splitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        splitPane.setResizeWeight(0.6);
        splitPane.setToolTipText(org.openide.util.NbBundle.getMessage(ScenarioTopComponent.class, "ScenarioTopComponent.splitPane.toolTipText")); // NOI18N
        splitPane.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        splitPane.setOpaque(false);

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));
        add(treeView);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSplitPane splitPane;
    private org.openide.explorer.view.BeanTreeView treeView;
    // End of variables declaration//GEN-END:variables
    private ScenarioListener scenarioListener = new ScenarioListener();

    @Override
    public void componentOpened() {
        scenarioListener.register(this);
    }

    @Override
    public void componentClosed() {
        scenarioListener.remove();
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.3");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void setRootContext(Node node) {
        explorer.setRootContext(node);
//        propertySheet.setNodes(new Node[]{node});
        treeView.setRootVisible(true);
    }

    @Override
    public void removeRootContext() {
        explorer.setRootContext(Node.EMPTY);
        treeView.setRootVisible(false);
//        propertySheet.setNodes(null);
    }
}
